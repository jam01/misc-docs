ALPS Mapping Guidelines for HAL
================================
:author: Jose Montoya
:email: jamontoya01@gmail.com
:corpname: Mountain State Software Solutions
:revdate: September 24, 2017

== Summary
This document provides guidance on mapping ALPS descriptions to HAL representations. It is provided as a guide for those writing servers that will use ALPS profiles to generate HAL and for those writing client applications that will use ALPS profiles to "recognize" ALPS descriptors within the HAL document.

== A Review of ALPS Principles
The Application-Level Profile Semantic(ALPS)<<0,[0]>> specification is designed to describe the data elements and state transitions that make up a 'problem domain' (e.g. microblogging, accounting, etc.). ALPS documents are designed to be useful to both client and server implementors and can be used at both run-time and design-time to handle the generation and interpretation of response representations. ALPS description documents are referred to as 'profiles' or 'profile documents'.

Since the aim is to support a wide set of use cases (clients, servers, run-time, design-time, etc.), ALPS profiles do not describe the runtime 'behavior' of any single system. Instead ALPS profiles describe the problem domain boundaries (e.g. the possible data elements and possible state transitions). It is up to implementors to decide how they wish to use ALPS proflies in order to create an actual instance of a service or client application.

=== Servers and Clients
For server implementors, ALPS profiles establish the list of possible identifiers for data values (+givenName+, +familyName+, etc.) and transitions (+publish+, +createUser+, etc). ALPS profiles also provide additional description information for state transitions including whether the transition is 'safe' or 'idempotent' and, in some cases, whether there are any possible arguments that can be passed with each transition. 

For clients, implementors can use the same ALPS document as a guide for what to expect from a service which advertises support for an ALPS profile. For example, if a service announces that it uses the ALPS profile for microblogging, then any client application that was built to support the microblogging profile SHOULD be able to recongize all the important data elements and state transitions emitted by that service.

== Advertising ALPS Profiles for HAL Representations
Servers returning HAL responses can advertise the ALPS profiles they support using the following methods:

HAL +profile+ media type parameter::
The +profile+ parameter<<1,[1]>> MAY be used on the +Content-Type+ HTTP header, with the parameter value set to the URL of the ALPS profile document.
----
Content-Type: application/[json||xml]+hal; profile="http://alps.io/profiles/microblogging"
----
Additionally, clients can use the same parameter on the +Accept+ header to facilitate content negotiation.

Profile Link Relation::
Responses SHOULD include a +profile+ Link Relation with the +href+ value set to the URL of the ALPS profile document
----
{
  "_links": { "profile": { "href" : "http://alps.io/profiles/microblogging" } }
}
----

Link Header::
  Responses MAY include the +Link+ header<<2,[2]>> with the +href+ value set to the URL of the ALPS profile document and the +rel+ value set to "profile."+++<br>+++
  +Link: <http://alps.io/profiles/microblogging>; rel="profile"+

[NOTE]
====
TODO: Talk about allowing multiple profiles 
====

Clients accepting HAL responses SHOULD look for the ALPS profile in each of these places as appropriate to the response. If an ALPS profile reference appears in more than one location (e.g. Media Type +profile+ parameter, +LINK+ header, +HAL._links.profile+ 
Link Relation) *all* profiles SHOULD be considered valid, with the Media Type parameter taking precedence.

== Basic Mapping Rules for ALPS to HAL
The following are the basic rules for rendering ALPS profile information into valid HAL representations.

=== ALPS state transition descriptors:
Decriptors with +type+ of SAFE, UNSAFE, and IDEMPOTENT SHOULD be transformed into  _links entries.

==== The ALPS +descriptor.id+ property
The +ALPS.descriptor.id+ SHOULD be transformed into the key or +rel+ to a Link Object. Below are several possible scenarios:
----
<!-- descriptor.id is a IANA registered link relation>
<!-- ALPS document -->
<descriptor id="next" ... />

{
  "_links": { "next": { ... } }
}
----

Custom link relations SHOULD resolve to the +Doc.value+ of the pertinent descriptor. Such a resource MAY be facilitated by the ALPS Public Repository hosting the ALPS document.
----
<!-- descriptor.id is a custom link relation -->
<!-- ALPS document -->
<descriptor id="performTransition" ... />

{
  "_links": { "http://apr.com/someAlps/docs/performTransition": { ... } }
}
----


==== The HAL +curies+ relation type
If the CURIEs syntax is to be used, the combination of +curies.href+ value and +rel+ name SHOULD be an URI<<4,[4]>><<5,[5]>> that resolves to a document as described previously.
----
{
  "_links": {
    "someAlps:performTransition": { ... },
    "curies": [
      {
        "href": "http://apr.com/someAlps/docs/{rel}",
        "name": "someAlps",
        "templated": true
      }
    ]
  }
}
----

==== The HAL +LinkObject.type+ property
The +HAL.LinkObject.type+ MAY be a complete and resolvable URI<<3,[3]>> to an ALPS +descriptor+.
----
<!-- ALPS document -->
<descriptor id="next" name="nextItem" ... />

{
  "_links": { "next": [ { ... },
                        { "type": "http://apr.com/someAlps#next" }
                      ] 
            }
}
----

[NOTE]
====
In cases where applying an ALPS document to a HAL representation results in a Link Relation whose value is a Link Object array, +type+ and +name+ properties become critical in providing semantic information to differentiate one Link Object from another within the same Link Relation.
====


==== The HAL +LinkObject.name+ property
The +HAL.LinkObject.name+ MAY be transformed into the +descriptor.name+ property.
----
<!-- ALPS document -->
<descriptor id="next" name="nextItem" ... />

{
  "_links": { "next": { "name": "nextItem" } }
}
----


=== ALPS semantic descriptor:
Decriptors with +type+ of SEMANTIC SHOULD be transformed into regular state properties as specified by the pertaining media type.

==== The ALPS +descriptor.id+ property
The +ALPS.descriptor.id+ SHOULD be transformed into the key of the property. Below are some possible scenarios:
----
<!-- ALPS document -->
<descriptor id="height"/>

{
  "height": 180
}
----

The value of such property will be in the appropriate format, as supported by the media type. In a case where the are SEMANTIC child descriptors, they SHOULD be presented as properties to the parent property, recursively, following the same rules.
----
<!-- ALPS document -->
<descriptor id="height">
  <descriptor id="measurement"/>
  <descriptor id="units"/>
</descriptor>

{
  "height": { "measurement": 180, 
              "units": "cm" }
}
----

== Shortcomings of Mapping ALPS to HAL
The following are some of the shortcomings when appplying a ALPS document to a HAL representation.

=== Semantic descriptors with non-semantic child descriptors
There is no way to present a semantic descriptor and include its state transitions. HAL defines state transitions for the root resource only.

=== HTTP method to use when dereferencing non-semantic descriptors at runtime
There is no appropriate way to present to the client the +desriptor.type+ in order to hint the HTTP method to use when dereferencing the Link Object, or a way to communicate the HTTP method directly.

=== Format of value for semantic descriptors
In cases where the media type supports multiple formats for values to state properties, there is no way to communicate to the client what the expected format should be, ie. Json string vs Json number.


== Mapping Examples
Below are some examples to use as guides when mapping between ALPS and HAL.

=== Search Example
This is a very simple ALPS profile that defines a single semantic descriptor ("text") and a single safe descriptor ("search"). This profile describes the essence of the front end of any simple web-based search engine. Mapping this ALPS profile to an HAL+JSON document is rather straight-forward.

----
<!-- ALPS Profile -->
<alps>
  <link rel="self" href="http://alps.io/profiles/search" /> <1>
  <descriptor id="search" type="safe">
    <descriptor id="text" type="semantic"/>
  </descriptor>
</alps>

<!-- HAL+JSON representation -->
{
  "_links": {
    "profile": {
      "href": "http://apr.com/search"
    },
    "search": {
      "href": "",
      "type": "http://apr.com/search#search"
    },
    "curies": [
      {
        "href": "http://apr.com/search/docs/{rel}",
        "name": "someAlps",
        "templated": true
      }
    ]
  }
}
----

=== User Account Example
This example shows an ALPS profile that describes both reading and writing operations on a user account. It is also structured as a `flat' ALPS document. The profile does not constrain any server implementations to specific parameters for transitions; each server can select the data elements that best fit that server's use cases.

.ALPS User Account Profile
----
<alps>
  <link rel="self" href="http://apr.com/useraccount" /> <1>
  
  <descriptor id="list" type="safe" rt="#user/>
  <descriptor id="create" type="unsafe" href="#user"/>
  <descriptor id="login" type="idempotent">
    <descriptor type="semantic" id="username"/>
    <descriptor type="semantic" id="password"/>
  </descriptor>

  <descriptor id="user" type="semantic">
    <descriptor id="accessCode" type="semantic"/>
    <descriptor id="givenName" type="semantic"/>
    <descriptor id="familyName" type="semantic"/>
    <descriptor id="email" type="semantic"/>
    <descriptor id="telephone" type="semantic"/>
    <descriptor id="update" type="idempotent"/>
    <descriptor id="remove" type="idempotent"/>
  </descriptor>

</alps>
----

.HAL+JSON Representation of main resource with affordances to login, list existing accounts, or create a new account
----
{
  "_links": {
    "profile": {
      "href": "http://apr.com/useraccount"
    },
    "userAcc:list": {
      "href": "...",
      "type": "http://apr.com/useraccount#list"
    },
    "userAcc:login": {
      "href": "...",
      "type": "http://apr.com/useraccount#login"
    },
    "userAcc:create": {
      "href": "...",
      "type": "http://apr.com/useraccount#create"
    },
    "curies": [
      {
        "href": "http://apr.com/useraccount/docs/{rel}",
        "name": "userAcc",
        "templated": true
      }
    ]
  }
}
----
In the above HAL+JSON example, the main resource shows the use of the +login+ and +create+ ALPS decriptors applied to +HAL._links+

The following HAL+JSON representation is an example of what might be returned when a client application activates the +list+:
      
.JSON Representation
----
{
  "_links": {
    "profile": {
      "href": "http://apr.com/useraccount"
    },
    "self": {
      "href": "...",
      "type": "http://apr.com/useraccount#list"
    }
  },
  "_embedded": {
    "item": [
      {
        "_links": {
          "self": {
            "href": "..."
          },
          "userAcc:update": {
            "href": "...",
            "type": "http://apr.com/useraccount#update"
          },
          "userAcc:remove": {
            "href": "...",
            "type": "http://apr.com/useraccount#remove"
          }
        }
      }
    ],
    "curies": [
      {
        "href": "http://apr.com/useraccount/docs/{rel}",
        "name": "userAcc",
        "templated": true
      }
    ]
  }
}
----

The following HAL+JSON representation is an example of what might be returned when a client application activates the +item.self+:
      
.JSON Representation
----
{
  "_links": {
    "profile": {
      "href": "http://apr.com/useraccount"
    },
    "self": {
      "href": "...",
      "type": "http://apr.com/useraccount#user"
    },
    "userAcc:update": {
      "href": "...",
      "type": "http://apr.com/useraccount#update"
    },
    "userAcc:remove": {
      "href": "...",
      "type": "http://apr.com/useraccount#remove"
    },
    "curies": [
      {
        "href": "http://apr.com/useraccount/docs/{rel}",
        "name": "userAcc",
        "templated": true
      }
    ]
  },
  "accessCode": "",
  "givenName": "",
  "familyName": "",
  "email": "",
  "telephone": ""
}
----

== References

[[0]] 0. http://alps.io/spec

[[1]] 1. https://tools.ietf.org/html/rfc6906#section-3.1

[[2]] 2. https://tools.ietf.org/search/rfc5988#section-5

[[3]] 3. https://tools.ietf.org/html/draft-amundsen-richardson-foster-alps-02#section-2.2.7.2

[[4]] 4.  https://tools.ietf.org/html/draft-kelly-json-hal-08#section-8.2

[[5]] 5.  https://tools.ietf.org/html/draft-michaud-xml-hal-01#section-8.2
